name: Build

on: 
 push:
 pull_request:

jobs:

  build:
    runs-on: windows-latest

    defaults:
      run:
        working-directory: .
    outputs:
         semver: ${{ steps.gitversion.outputs.semver }}
         githubcomponent: ${{ steps.packageBuildResults.outputs.githubcomponent }}  
         nupkg-githubcomponent: ${{ steps.createNupkg.outputs.nupkg-githubcomponent }}
         
      
    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        fetch-depth: 0  

    - uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '3.1.x'

    - name: Setup Version      
      uses: gittools/actions/gitversion/setup@v0.10.2
      with:
        versionSpec: '5.3.6'
      env: 
        ACTIONS_ALLOW_UNSECURE_COMMANDS: TRUE
    
    - name: Determine Version      
      uses: gittools/actions/gitversion/execute@v0.10.2
      with:
        useConfigFile: true        
      env: 
        ACTIONS_ALLOW_UNSECURE_COMMANDS: TRUE

    - name: get SemVer       
      id: gitversion
      run: |
        echo "SemVer: v$($env:GitVersion_SemVer)" 
        Write-Host "::set-output name=semver::$($env:GitVersion_MajorMinorPatch)"                
        $fileName = "dummy-v$($env:GitVersion_SemVer)"
        echo "SemVerMMP: v$($env:GitVersion_MajorMinorPatch)"
        Write-Host "Filename: '$fileName'" 


    - name: Setup msbuild
      uses: microsoft/setup-msbuild@v1.1
      with:
          vs-version: '12.0'
     
      
    - name: Restore Packages
      run: Nuget restore githubcomponent.sln

    - name: Build
      run: msbuild -m -t:Rebuild /p:Configuration=Release /p:Platform="Any CPU" /fl githubcomponent.sln
        
    
    - name: Archive Build Log
      uses: actions/upload-artifact@v2
      if: ${{ success() || failure() }}
      with:
        name: Compile_Solution_log
        path: |
          *.log    
    
      
      
    - name: Create zip
      id: packageBuildResults
      run: |
        $sourceFolder = Join-Path $env:GITHUB_WORKSPACE "out" | Join-Path -ChildPath "net*" 
        $outFolder = Join-Path $env:GITHUB_WORKSPACE "out" | Join-Path -ChildPath "githubcomponent"
        New-Item -ItemType Directory -Force -Path $outFolder
        $fileName = "githubcomponent-v$($env:GitVersion_MajorMinorPatch).zip"
        Write-Host "Filename: '$fileName'"
        Write-Host "sourceFolder: '$sourceFolder'"
        Write-Host "Outfolder: '$outFolder'"
        Write-Host "::set-output name=githubcomponent::$($fileName)"
        $outPath = Join-Path $outFolder $fileName
        Compress-Archive -DestinationPath $outPath -Path $sourceFolder -CompressionLevel Optimal
      
        
    - name: Archive Build Output
      uses: actions/upload-artifact@v2
      with:
         name: githubcomponent
         path: |
            out/githubcomponent


    - name: Create Nuget Packages 
      id: createNupkg
      run: |
        nuget pack .nuget\githubcomponent.nuspec -Version $($env:GitVersion_MajorMinorPatch)
        Write-Host "::set-output name=nupkg-githubcomponent::company.githubcomponent.$($env:GitVersion_MajorMinorPatch).nupkg"
        
    - name: Archive NuGet Packages
      uses: actions/upload-artifact@v2
      with:
        name: nuget-githubcomponent
        path: |
          *.nupkg

  release:
    if: github.ref == 'refs/heads/master'    
    runs-on: windows-latest
    needs: build
  
    steps:
      - name: Download Build Output
        uses: actions/download-artifact@v2
        with:
          name: githubcomponent

      - name: Download NuGet Package
        uses: actions/download-artifact@v2
        with:
          name: nuget-githubcomponent

      - name: Debug
        run: |
          tree
      
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 
        with:
          #tag_name: v$($env:GitVersion_MajorMinorPatch)
          tag_name: v${{ needs.build.outputs.semver }}
          release_name: Release v${{ needs.build.outputs.semver }}
          body: |
            ${{ github.event.head_commit.message }}
          draft: true
          prerelease: false   
          
      - name: Upload Zip
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} 
          asset_path: ./${{ needs.build.outputs.githubcomponent }}
          asset_name: ${{ needs.build.outputs.githubcomponent }}
          asset_content_type: application/zip
    
          
      - name: Upload Nupkg
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} 
          asset_path: ./${{ needs.build.outputs.nupkg-githubcomponent }}
          asset_name: ${{ needs.build.outputs.nupkg-githubcomponent }}
          asset_content_type: application/zip
######################
name: Publish NuGet Packages

on:
  release:
    types: [published]
    
permissions:
  packages: write
  contents: read  
  
jobs:
  build:
    runs-on: windows-latest

    defaults:
      run:
        working-directory: .
      
    steps:
      - name: Download NuGet Packages from Release
        run: |
            Write-Host "GITHUB_REF: '$($env:GITHUB_REF)'"
            $prefix = "refs/tags/"
            $name = $($env:GITHUB_REF).Substring($prefix.Length)
            Write-Host "name: '$name'"
            gh release download $name --repo repo/name --pattern '*.nupkg' --clobber
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Publish to github packages
        run: |          
            dotnet nuget add source --username ${{ secrets.USERNAME }} --password ${{ secrets.GITHUB_TOKEN }} --store-password-in-clear-text --name github "https://nuget.pkg.github.com/test/index.json"
            dotnet nuget push "*.nupkg" --api-key ${{ secrets.GITHUB_TOKEN }} --source github
        env:
            USERNAME: ${{ secrets.USERNAME }}
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#################
